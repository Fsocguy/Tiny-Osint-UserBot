import asyncio
import aiohttp

from tools.config import shodan_api_key
from colorama import Fore, Style, init

init(autoreset = True)
yellow  =  Fore.YELLOW + Style.BRIGHT
red     =  Fore.RED + Style.BRIGHT

async def ip_main(ip_address):
    async with aiohttp.ClientSession() as session:
        async def ip_whois(ip_address):
            try:
                async with session.get(url = f'http://ip-api.com/json/{ip_address}') as ip_whois_data:
                    if ip_whois_data.status == 200 or ip_whois_data.status == 304:
                        return await ip_whois_data.json()
                    else:
                        print(f'{yellow}[WHOIS API [1]]: {red}ip-api –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!')
                        return None
            except Exception as e:
                print(f'{yellow}[WHOIS API [1]]: {red}–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}')
                return None
        
        async def ip_whois_additional(ip_address):
            try:
                async with session.get(url = f'https://api.ipapi.is/?q={ip_address}') as ip_whois_additional_data:
                    if ip_whois_additional_data.status == 200 or ip_whois_additional_data.status == 304:
                        return await ip_whois_additional_data.json()
                    else:
                        print(f'{yellow}[WHOIS API [2]]: {red}api.ipapi.is –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
                        return None
            except Exception as e:
                print(f'{yellow}[WHOIS API [2]]: {red}–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}')
                return None

        async def ip_shodan(ip_address, shodan_api_key):
            try:
                async with session.get(url = f'https://api.shodan.io/shodan/host/{ip_address}?key={shodan_api_key}') as ip_shodan_data:
                    if ip_shodan_data.status == 200 or ip_shodan_data.status == 304:        
                        return await ip_shodan_data.json()
                    elif ip_shodan_data.status == 404:
                        print(f'{yellow}[SHODAN API]: {red}–ù–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–∞–∫–æ–º—É –∞–¥—Ä–µ—Å—É: {ip_address}')
                        return None
                    else:
                        print(f'{yellow}[SHODAN API]: {red}shodan.io –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!')
                        return None
            except Exception as e:
                print(f'{yellow}[SHODAN API]: {red}–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}')
                return None
        
        async def ip_output(ip_address, ip_whois_data, ip_whois_additional_data, ip_shodan_data):
            if ip_whois_data is not None:
                ip_whois_data_variables  = ['regionName', 'timezone', 'org', 'country', 'lon', 'lat', 'isp', 'city']
                ip_whois_data_values     = [ip_whois_data.get(variable, '‚ùå') for variable in ip_whois_data_variables]
                whois_region, whois_timezone, whois_organization, whois_country, whois_longitude, whois_latitude, whois_provider, whois_city = ip_whois_data_values
            
            if ip_whois_additional_data is not None:
                additional_datacenter  = '–î–∞' if ip_whois_additional_data.get('is_datacenter', False) else '–ù–µ—Ç'
                additional_abuser      = '–î–∞' if ip_whois_additional_data.get('is_abuser', False) else '–ù–µ—Ç'
                additional_bogon       = '–î–∞' if ip_whois_additional_data.get('is_abuser', False) else '–ù–µ—Ç'
                additional_proxy       = '–î–∞' if ip_whois_additional_data.get('is_proxy', False) else '–ù–µ—Ç'
                additional_tor         = '–î–∞' if ip_whois_additional_data.get('is_tor', False) else '–ù–µ—Ç'
                additional_vpn         = '–î–∞' if ip_whois_additional_data.get('is_vpn', False) else '–ù–µ—Ç'
                
                additional_range   =  ip_whois_additional_data.get('company', {}).get('network', '‚ùå')
                additional_update  =  ip_whois_additional_data.get('asn', {}).get('updated', '‚ùå')
                additional_create  =  ip_whois_additional_data.get('asn', {}).get('created', '‚ùå')
                additional_asn     =  ip_whois_additional_data.get('asn', {}).get('asn', '‚ùå')

            if ip_shodan_data is not None:
                shodan_hostname   =  ip_shodan_data.get('hostnames', '‚ùå') if ip_shodan_data.get('hostames') else '‚ùå'
                shodan_os         =  ip_shodan_data.get('os', '‚ùå') if ip_shodan_data.get('os', '‚ùå') else '‚ùå'
                shodan_country    =  ip_shodan_data.get('country_name', '‚ùå')
                shodan_longitude  =  ip_shodan_data.get('longitude', '‚ùå')
                shodan_latitude   =  ip_shodan_data.get('latitude', '‚ùå')
                shodan_ports      =  ip_shodan_data.get('ports', '‚ùå')
                shodan_ports      =  ', '.join(map(str, shodan_ports))
                shodan_city       =  ip_shodan_data.get('city', '‚ùå')
            else:
                shodan_hostname   =  '‚ùå'
                shodan_os         =  '‚ùå'
                shodan_country    =  '‚ùå'
                shodan_longitude  =  '‚ùå'
                shodan_latitude   =  '‚ùå'
                shodan_ports      =  '‚ùå'
                shodan_city       =  '‚ùå'

            ip_output_data = (
                f"‚îå[ üéØ **{ip_address}** ]\n"
                f"‚îú –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä: **{whois_provider}**\n"
                f"‚îú –û–≥—Ä–∞–Ω–∏–∑–∞—Ü–∏—è: **{whois_organization}**\n"
                f"‚îú ASN: **{additional_asn}**\n"
                f"‚îú –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: **{additional_create}**\n"
                f"‚îú –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: **{additional_update}**\n"
                f"‚îî –î–∏–∞–ø–∞–∑–æ–Ω –∞–¥—Ä–µ—Å–æ–≤: **{additional_range}**\n\n"
                "‚îå[ üì¢ –†–µ–ø—É—Ç–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ ]\n"
                f"‚îú –î–∞—Ç–∞—Ü–µ–Ω—Ç—Ä?: **{additional_datacenter}**\n"
                f"‚îú –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π?: **{additional_abuser}**\n"
                f"‚îú –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π?: **{additional_bogon}**\n"
                f"‚îú –ê–¥—Ä–µ—Å TOR?: **{additional_tor}**\n"
                f"‚îú –ê–¥—Ä–µ—Å PROXY?: **{additional_proxy}**\n"
                f"‚îî –ê–¥—Ä–µ—Å VPN?: **{additional_vpn}**\n\n"
                "‚îå[ üåé –ì–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ]\n"
                f"‚îú –°—Ç—Ä–∞–Ω–∞: **{whois_country}**\n"
                f"‚îú –û–±–ª–∞—Å—Ç—å: **{whois_region}**\n"
                f"‚îú –ì–æ—Ä–æ–¥: **{whois_city}**\n"
                f"‚îú –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: **{whois_timezone}**\n"
                f"‚îú –®–∏—Ä–æ—Ç–∞: **{whois_latitude}**\n"
                f"‚îî –î–æ–ª–≥–æ—Ç–∞: **{whois_longitude}**\n\n"
                "‚îå[ üî¥ Shodan ]\n"
                f"‚îú –°—Ç—Ä–∞–Ω–∞: **{shodan_country}**\n"
                f"‚îú –ì–æ—Ä–æ–¥: **{shodan_city}**\n"
                f"‚îú –®–∏—Ä–æ—Ç–∞: **{shodan_latitude}**\n"
                f"‚îú –î–æ–ª–≥–æ—Ç–∞: **{shodan_longitude}**\n"
                f"‚îú OC: **{shodan_os}**\n"
                f"‚îú –ò–º–µ–Ω–∞ —Ö–æ—Å—Ç–∞: **{shodan_hostname}**\n"
                f"‚îî –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: **{shodan_ports}**"
            )
            return ip_output_data
        try:
            ip_whois_data             =  await ip_whois(ip_address)
            ip_whois_additional_data  =  await ip_whois_additional(ip_address)
            ip_shodan_data            =  await ip_shodan(ip_address, shodan_api_key)
            ip_output_data            =  await ip_output(ip_address, ip_whois_data, ip_whois_additional_data, ip_shodan_data)
            return ip_output_data
        finally:
            await session.close()