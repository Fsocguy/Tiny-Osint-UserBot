import xml.etree.ElementTree as ET
import asyncio
import aiohttp

from tools.config import wigle_api_key, wigle_api_name, yandex_api_key
from colorama import Fore, Style, init

init(autoreset = True)
yellow  =  Fore.YELLOW + Style.BRIGHT
red     =  Fore.RED + Style.BRIGHT

async def mac_main(mac_address):
    async with aiohttp.ClientSession() as session:
        async def mac_whois(mac_address):
            try:
                async with session.get(url = f'https://api.maclookup.app/v2/macs/{mac_address}') as mac_whois_data:
                    if mac_whois_data.status == 200 or mac_whois_data.status == 304:
                        return await mac_whois_data.json()
                    else:
                        print(f'{yellow}[MAC WHOIS]: {red}api.maclookup.app –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!')
                        return None
            except Exception as e:
                print(f'{yellow}[MAC WHOIS]: {red}–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}')
                return None
        
        async def mac_yandex(mac_address, yandex_api_key):
            try:
                async with session.post(
                    url = 'http://api.lbs.yandex.net/geolocation',
                    data = {'xml': f'<ya_lbs_request><common><version>1.0</version><api_key>{str(yandex_api_key)}</api_key></common><wifi_networks><network><mac>{str(mac_address)}</mac><signal_strength>-1</signal_strength><age>2000</age></network></wifi_networks></ya_lbs_request>'}, 
                    headers = {'Content-Type': 'application/xml'}) as mac_yandex_data:
                    if mac_yandex_data.status == 200 or mac_yandex_data.status == 304:
                        return await mac_yandex_data.text()
                    else:
                        print(f'{yellow}[YANDEX API]: {red}api.lbs.yandex.net –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!')
                        return None
            except Exception as e:
                print(f'{yellow}[YANDEX API]: {red}–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}')
                return None
        
        async def mac_wigle(mac_address, wigle_api_key, wigle_api_name):
            try:
                async with session.get(
                    url = f'https://api.wigle.net/api/v2/network/detail?netid={mac_address}',
                    auth = aiohttp.BasicAuth(wigle_api_name, wigle_api_key)) as mac_wigle_data:
                    if mac_wigle_data.status == 200 or mac_wigle_data.status == 304:
                        if mac_wigle_data['message'] == 'Too many queries today.':
                            print(f'{yellow}[WIGLE API]: {red}Spamblock')
                            return None
                        else:
                            return await mac_wigle_data.json()
                    elif mac_wigle_data.status == 429:
                        print(f'{yellow}[WIGLE API]: {red}Spamblock')
                        return None
                    else:
                        print(f'{yellow}[WIGLE API]: {red}api.wigle.net –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!')
                        return None
            except Exception as e:
                print(f'{yellow}[WIGLE API]: {red}–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}')
                return None

        async def mac_mylinkov(mac_address):
            try:
                async with session.get(url = f'https://api.mylnikov.org/geolocation/wifi?v=1.1&data=open&bssid={mac_address}') as mac_mylinkov_data:
                    if mac_mylinkov_data.status == 200 or mac_mylinkov_data.status == 304:
                        return await mac_mylinkov_data.json()
                    else:
                        print(f'{yellow}[MYLINKOV API]: {red}api.mylnikov.org –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!')
                        return None
            except Exception as e:
                print(f'{yellow}[MYLINKOV API]: {red}–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}')
                return None
        
        async def mac_output(mac_address, mac_whois_data, mac_yandex_data, mac_wigle_data, mac_mylinkov_data):
            if mac_whois_data is not None:
                if not mac_whois_data.get('found', False):
                    whois_prefix      =  '‚ùå'
                    whois_company     =  '‚ùå'
                    whois_country     =  '‚ùå'
                    whois_blockstart  =  '‚ùå'
                    whois_blockend    =  '‚ùå'
                    whois_blocksize   =  '‚ùå'
                    whois_blocktype   =  '‚ùå'
                    whois_updated     =  '‚ùå'
                    whois_random      =  '‚ùå'
                    whois_private     =  '‚ùå'
                else:
                    whois_prefix      =  mac_whois_data.get('macPrefix', '‚ùå')
                    whois_company     =  mac_whois_data.get('company', '‚ùå')
                    whois_country     =  mac_whois_data.get('country', '‚ùå')
                    whois_blockstart  =  mac_whois_data.get('blockStart', '‚ùå')
                    whois_blockend    =  mac_whois_data.get('blockEnd', '‚ùå')
                    whois_blocksize   =  mac_whois_data.get('blockSize', '‚ùå')
                    whois_blocktype   =  mac_whois_data.get('blockType', '‚ùå')
                    whois_updated     =  mac_whois_data.get('updated', '‚ùå')
                
                    whois_random   =  '–î–∞' if mac_whois_data.get('isRand', False) else '–ù–µ—Ç'
                    whois_private  =  '–î–∞' if mac_whois_data.get('isPrivate', False) else '–ù–µ—Ç'
            
            if mac_yandex_data is not None:
                yandex_data = ET.fromstring(mac_yandex_data)
                yandex_latitude   =  yandex_data.find('.//latitude').text if yandex_data.find('.//latitude') is not None else '‚ùå'
                yandex_longitude  =  yandex_data.find('.//longitude').text if yandex_data.find('.//longitude') is not None else '‚ùå'
            
            if mac_wigle_data is not None:
                wigle_latitude    =  next((wigle_result.get('trilat', '‚ùå') for wigle_result in mac_wigle_data.get('results', [])), '‚ùå')
                wigle_longitude   =  next((wigle_result.get('trilong', '‚ùå') for wigle_result in mac_wigle_data.get('results', [])), '‚ùå')
                wigle_ssid        =  next((wigle_result.get('ssid', '‚ùå') for wigle_result in mac_wigle_data.get('results', [])), '‚ùå')
                wigle_encryption  =  next((wigle_result.get('encryption', '‚ùå') for wigle_result in mac_wigle_data.get('results', [])), '‚ùå')
                wigle_country     =  next((wigle_result.get('country', '‚ùå') for wigle_result in mac_wigle_data.get('results', [])), '‚ùå')
                wigle_region      =  next((wigle_result.get('region', '‚ùå') for wigle_result in mac_wigle_data.get('results', [])), '‚ùå')
                wigle_road        =  next((wigle_result.get('road', '‚ùå') for wigle_result in mac_wigle_data.get('results', [])), '‚ùå')
                wigle_city        =  next((wigle_result.get('city', '‚ùå') for wigle_result in mac_wigle_data.get('results', [])), '‚ùå')
            else:
                wigle_latitude    =  '‚ùå' 
                wigle_longitude   =  '‚ùå' 
                wigle_ssid        =  '‚ùå' 
                wigle_encryption  =  '‚ùå' 
                wigle_country     =  '‚ùå' 
                wigle_region      =  '‚ùå' 
                wigle_road        =  '‚ùå' 
                wigle_city        =  '‚ùå' 

            if mac_mylinkov_data is not None:
                mylinkov_latitude  =  mac_mylinkov_data.get('data').get('lat', '‚ùå')
                mylinkov_logitude  =  mac_mylinkov_data.get('data').get('lon', '‚ùå')
                mylinkov_range     =  mac_mylinkov_data.get('data').get('range', '‚ùå')
            
            mac_output_data = (
                f"‚îå[ üéØ **{mac_address}** ]\n"
                f"‚îú –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: **{whois_company}**\n"
                f"‚îî –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: **{whois_country}**\n\n"
                f"‚îå[ ‚öôÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥—Ä–µ—Å–∞ ]\n"
                f"‚îú –¢–∏–ø –±–ª–æ–∫–∞: **{whois_blocktype}**\n"
                f"‚îú –ü—Ä–µ—Ñ–∏–∫—Å: **{whois_prefix}**\n"
                f"‚îú –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: **{whois_blocksize}**\n"
                f"‚îú –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞: **{whois_blockstart}**\n"
                f"‚îî –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞: **{whois_blockend}**\n\n"
                f"‚îå[ üìã –î–æ–ø. —Å–≤–µ–¥–µ–Ω–∏—è ]\n"
                f"‚îú –û–±–Ω–æ–≤–ª–µ–Ω: **{whois_updated}**\n"
                f"‚îú –†–∞–Ω–¥–æ–º: **{whois_random}**\n"
                f"‚îî –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: **{whois_private}**\n\n"
                f"‚îå[ üåé –ì–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Yandex) ]\n"
                f"‚îú –®–∏—Ä–æ—Ç–∞: **{yandex_latitude}**\n"
                f"‚îî –î–æ–ª–≥–æ—Ç–∞: **{yandex_longitude}**\n\n"
                f"‚îå[ üì∂ Wigle ]\n"
                f"‚îú SSID: **{wigle_ssid}**\n"
                f"‚îú –ó–∞—â–∏—Ç–∞: **{wigle_encryption}**\n"
                f"‚îú –°—Ç—Ä–∞–Ω–∞: **{wigle_country}**\n"
                f"‚îú –†–µ–≥–∏–æ–Ω: **{wigle_region}**\n"
                f"‚îú –ì–æ—Ä–æ–¥: **{wigle_city}**\n"
                f"‚îú –£–ª–∏—Ü–∞: **{wigle_road}**\n"
                f"‚îú –®–∏—Ä–æ—Ç–∞: **{wigle_latitude}**\n"
                f"‚îî –î–æ–ª–≥–æ—Ç–∞: **{wigle_longitude}**\n\n"
                f"‚îå[ üÖæÔ∏è Mylinkov ]\n"
                f"‚îú –®–∏—Ä–æ—Ç–∞: **{mylinkov_latitude}**\n"
                f"‚îú –î–æ–ª–≥–æ—Ç–∞: **{mylinkov_logitude}**\n"
                f"‚îî –î–∏–∞–ø–∞–∑–æ–Ω: **{mylinkov_range}**"
            )
            return mac_output_data
        try:
            mac_whois_data     =  await mac_whois(mac_address)
            mac_yandex_data    =  await mac_yandex(mac_address, yandex_api_key)
            mac_wigle_data     =  await mac_wigle(mac_address, wigle_api_key, wigle_api_name)
            mac_mylinkov_data  =  await mac_mylinkov(mac_address)
            mac_output_data    =  await mac_output(mac_address, mac_whois_data, mac_yandex_data, mac_wigle_data, mac_mylinkov_data)
            return mac_output_data
        finally:
            await session.close()